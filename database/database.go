package database

import (
	"bufio"
	"database/sql"
	"fmt"
	"math/rand"
	"os"
	"strconv"
	"sync"
	"time"

	"github.com/aaron-suarez/go-juice-inventory/util"
)

var once sync.Once
var db *sql.DB

func GetDbInstance() *sql.DB {
	if db == nil {
		once.Do(
			func() {
				host := os.Getenv("POSTGRES_HOST")
				port, err := strconv.Atoi(os.Getenv("POSTGRES_PORT"))
				user := os.Getenv("POSTGRES_USER")
				password := os.Getenv("POSTGRES_PASSWORD")
				dbname := os.Getenv("POSTGRES_DB")

				if err != nil {
					fmt.Println("Invalid port, using 5432 instead")
					port = 5432
				}
				psqlconn := fmt.Sprintf("host=%s port=%d user=%s password=%s dbname=%s sslmode=disable", host, port, user, password, dbname)

				db, err = sql.Open("postgres", psqlconn)
				util.CheckError(err)
			})
	}
	return db
}

func SetUpDb(db *sql.DB) {
	createSchema := `CREATE SCHEMA IF NOT EXISTS inventory;`
	createTable := `CREATE TABLE IF NOT EXISTS juice (
		id          int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
		name        varchar NOT NULL,
		expiration  date,
		deleted_at  date
	);`

	_, err := db.Exec(createSchema)
	util.CheckError(err)
	_, err = db.Exec(createTable)
	util.CheckError(err)

	populateData(db)
	rows, _ := db.Query("SELECT * FROM juice WHERE deleted_at IS NULL LIMIT 200;")
	rows.Close()

	fmt.Println("Sucessfully set up database")
}

func populateData(db *sql.DB) {
	var count int

	err := db.QueryRow("SELECT COUNT(*) FROM juice").Scan(&count)
	util.CheckError(err)

	// Only need to populate if it's not already populated
	if count > 0 {
		fmt.Println("Database already populated")
		return
	}

	insertJuices := `INSERT INTO juice (name, expiration) VALUES `
	juiceNames, err := os.Open(os.Getenv("JUICE_PATH"))
	util.CheckError(err)
	defer juiceNames.Close()

	scnr := bufio.NewScanner(juiceNames)
	scnr.Split(bufio.ScanLines)

	for scnr.Scan() {
		insertJuices = insertJuices + "('" + scnr.Text() + "', '" + randate().Format("Jan-02-06") + "'),\n"
	}
	insertJuices = insertJuices[:len(insertJuices)-2]
	insertJuices = insertJuices + ";"

	_, err = db.Exec(insertJuices)
	util.CheckError(err)
	fmt.Println("Sucessfully inserted rows into the juice table")
}

// Generates a random date somewhere between now and 1 year from now
func randate() time.Time {
	var delta int64 = 31557600

	sec := rand.Int63n(delta) + time.Now().Unix()
	return time.Unix(sec, 0)
}
